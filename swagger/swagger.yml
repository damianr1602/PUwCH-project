swagger: "2.0"

info:
  description: This is a simple API
  version: 1.0.0
  title: Simple movies API
  # put the contact info for your development or API team
  contact:
    email: damianr1602@gmail.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
  - name: apiUsers
    description: Operations available to regular apiUsers

paths:
  /movies:
    get:
      tags:
        - apiUsers
      summary: Show movies
      operationId: AllMovies
      description: |
        By passing in the appropriate options, you can search for
        available movies in the system
      produces:
        - application/json
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up movie
          required: false
          type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          type: integer
          format: int32
          minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          type: integer
          format: int32
          minimum: 0
          maximum: 15
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: "#/definitions/movie"
        404:
          $ref: "#/responses/NotFound"
    post:
      tags:
        - apiUsers
      summary: adds a movie
      operationId: CreateMovie
      description: Adds a movie to the system
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Movie
          description: Movie to add
          schema:
            $ref: "#/definitions/movie"
      responses:
        201:
          description: item created
          schema:
            $ref: "#/definitions/movie"
        401:
          $ref: "#/responses/Unauthorized"
        409:
          description: an existing item already exists
    put:
      tags:
        - apiUsers
      summary: Update existing movie
      operationId: UpdateMovie
      description: Update existing movie
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Movie
          description: Movie to update
          schema:
            $ref: "#/definitions/movie"
      responses:
        200:
          description: movie updated successfully
          schema:
            $ref: "#/definitions/result"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
    delete:
      tags:
        - apiUsers
      summary: Delete existing movie
      operationId: DeleteMovie
      description: Delete existing movie
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Movie
          description: Movie to delete
          schema:
            $ref: "#/definitions/movie"
      responses:
        200:
          description: movie deleted successfully
          schema:
            $ref: "#/definitions/result"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"

  /movies/{id}:
    get:
      tags:
        - apiUsers
      summary: Search best result matching criteria
      operationId: FindMovie
      description: |
        By passing in the appropriate options, you can search for
        available movie in the system
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: pass an optional search string for looking up movie
          required: true
          type: string
      responses:
        200:
          description: search result matching criteria
          schema:
            $ref: "#/definitions/movie"
        404:
          $ref: "#/responses/NotFound"
responses:
  NotFound:
    description: The specified resource was not found
    schema:
      $ref: "#/definitions/result"
  Unauthorized:
    description: Unauthorized
    schema:
      $ref: "#/definitions/result"

definitions:
  result:
    type: object
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
    required:
      - code
      - message
  movie:
    type: object
    properties:
      _id:
          type: string
          example: 5ed2882a10ab722e54e07f7f
          x-go-custom-tag: "bson:\"_id\""
      director:
        type: string
        example:
          - John Lasseter
      writers:
        type: array
        items:
          type: string
        example:
          - John Lasseter
          - John Lasseter2
      awards:
        type: object
        properties:
          nominations:
            type: integer
          text:
            type: string
          wins:
            type: integer
        x-go-custom-tag: "bson:\"awards\""
        
      reviews:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            rating:
              type: number
            comment:
              type: string
            date:
              type: string
              format: date-time 
      year:
        type: integer
      released:
        type: string
        format: date-time 
      runtime:
        type: integer
      poster:
        type: string
      imdb:
        type: object
        properties:
          id:
            type: string
          rating:
            type: number
          votes:
            type: integer
      tomato:
        type: object
        properties:
          fresh:
            type: integer
          consensus:
            type: string
          meter:
            type: integer
          rating:
            type: number
          userMeter:
            type: integer
          userRating:
            type: number
          userReviews:
            type: integer
          image:
            type: string
          reviews:
            type: integer
      title:
        type: string
      countries:
        type: array
        items:
          type: string
        example:
        - USA
      metacritic:
        type: integer
      type:
        type: string
      rated:
        type: string
      genres:
        type: array
        items:
          type: string
        example:
          - Adventure
          - Drama
      actors:
        type: array
        items:
          type: string
        example:
        - Tom Hanks
        - Jan Kowalski
      plot:
        type: string
    # Added by API Auto Mocking Plugin

# basePath: /damianr1602/chmury/1.0.0
schemes:
  - http
  - https