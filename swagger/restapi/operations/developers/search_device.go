// Code generated by go-swagger; DO NOT EDIT.

package developers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SearchDeviceHandlerFunc turns a function with the right signature into a search device handler
type SearchDeviceHandlerFunc func(SearchDeviceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SearchDeviceHandlerFunc) Handle(params SearchDeviceParams) middleware.Responder {
	return fn(params)
}

// SearchDeviceHandler interface for that can handle valid search device params
type SearchDeviceHandler interface {
	Handle(SearchDeviceParams) middleware.Responder
}

// NewSearchDevice creates a new http.Handler for the search device operation
func NewSearchDevice(ctx *middleware.Context, handler SearchDeviceHandler) *SearchDevice {
	return &SearchDevice{Context: ctx, Handler: handler}
}

/*SearchDevice swagger:route GET /movies developers searchDevice

Search device

By passing in the appropriate options, you can search for
available inventory in the system


*/
type SearchDevice struct {
	Context *middleware.Context
	Handler SearchDeviceHandler
}

func (o *SearchDevice) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSearchDeviceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
