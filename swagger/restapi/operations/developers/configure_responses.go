// Code generated by go-swagger; DO NOT EDIT.

package developers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/damianr1602/chmuryrest/swagger/models"
)

// ConfigureOKCode is the HTTP code returned for type ConfigureOK
const ConfigureOKCode int = 200

/*ConfigureOK search results matching criteria

swagger:response configureOK
*/
type ConfigureOK struct {

	/*
	  In: Body
	*/
	Payload []*models.MovieImdb `json:"body,omitempty"`
}

// NewConfigureOK creates ConfigureOK with default headers values
func NewConfigureOK() *ConfigureOK {

	return &ConfigureOK{}
}

// WithPayload adds the payload to the configure o k response
func (o *ConfigureOK) WithPayload(payload []*models.MovieImdb) *ConfigureOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the configure o k response
func (o *ConfigureOK) SetPayload(payload []*models.MovieImdb) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ConfigureOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.MovieImdb, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ConfigureBadRequestCode is the HTTP code returned for type ConfigureBadRequest
const ConfigureBadRequestCode int = 400

/*ConfigureBadRequest bad input parameter

swagger:response configureBadRequest
*/
type ConfigureBadRequest struct {
}

// NewConfigureBadRequest creates ConfigureBadRequest with default headers values
func NewConfigureBadRequest() *ConfigureBadRequest {

	return &ConfigureBadRequest{}
}

// WriteResponse to the client
func (o *ConfigureBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}
