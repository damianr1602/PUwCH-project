// Code generated by go-swagger; DO NOT EDIT.

package developers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/damianr1602/chmuryrest/swagger/models"
)

// SearchDeviceOKCode is the HTTP code returned for type SearchDeviceOK
const SearchDeviceOKCode int = 200

/*SearchDeviceOK search results matching criteria

swagger:response searchDeviceOK
*/
type SearchDeviceOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Movie `json:"body,omitempty"`
}

// NewSearchDeviceOK creates SearchDeviceOK with default headers values
func NewSearchDeviceOK() *SearchDeviceOK {

	return &SearchDeviceOK{}
}

// WithPayload adds the payload to the search device o k response
func (o *SearchDeviceOK) WithPayload(payload []*models.Movie) *SearchDeviceOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search device o k response
func (o *SearchDeviceOK) SetPayload(payload []*models.Movie) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchDeviceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Movie, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// SearchDeviceBadRequestCode is the HTTP code returned for type SearchDeviceBadRequest
const SearchDeviceBadRequestCode int = 400

/*SearchDeviceBadRequest bad input parameter

swagger:response searchDeviceBadRequest
*/
type SearchDeviceBadRequest struct {
}

// NewSearchDeviceBadRequest creates SearchDeviceBadRequest with default headers values
func NewSearchDeviceBadRequest() *SearchDeviceBadRequest {

	return &SearchDeviceBadRequest{}
}

// WriteResponse to the client
func (o *SearchDeviceBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}
