// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Movie movie
//
// swagger:model movie
type Movie struct {

	// id
	ID string `json:"_id,omitempty" bson:"_id"`

	// actors
	Actors []string `json:"actors"`

	// awards
	Awards *MovieAwards `json:"awards,omitempty"`

	// countries
	Countries []string `json:"countries"`

	// director
	Director string `json:"director,omitempty"`

	// genres
	Genres []string `json:"genres"`

	// imdb
	Imdb *MovieImdb `json:"imdb,omitempty"`

	// metacritic
	Metacritic int64 `json:"metacritic,omitempty"`

	// plot
	Plot string `json:"plot,omitempty"`

	// poster
	Poster string `json:"poster,omitempty"`

	// rated
	Rated string `json:"rated,omitempty"`

	// released
	// Format: date-time
	Released strfmt.DateTime `json:"released,omitempty"`

	// reviews
	Reviews []*MovieReviewsItems0 `json:"reviews"`

	// runtime
	Runtime int64 `json:"runtime,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// tomato
	Tomato *MovieTomato `json:"tomato,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// writers
	Writers []string `json:"writers"`

	// year
	Year int64 `json:"year,omitempty"`
}

// Validate validates this movie
func (m *Movie) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwards(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImdb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleased(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReviews(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTomato(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Movie) validateAwards(formats strfmt.Registry) error {

	if swag.IsZero(m.Awards) { // not required
		return nil
	}

	if m.Awards != nil {
		if err := m.Awards.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awards")
			}
			return err
		}
	}

	return nil
}

func (m *Movie) validateImdb(formats strfmt.Registry) error {

	if swag.IsZero(m.Imdb) { // not required
		return nil
	}

	if m.Imdb != nil {
		if err := m.Imdb.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("imdb")
			}
			return err
		}
	}

	return nil
}

func (m *Movie) validateReleased(formats strfmt.Registry) error {

	if swag.IsZero(m.Released) { // not required
		return nil
	}

	if err := validate.FormatOf("released", "body", "date-time", m.Released.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Movie) validateReviews(formats strfmt.Registry) error {

	if swag.IsZero(m.Reviews) { // not required
		return nil
	}

	for i := 0; i < len(m.Reviews); i++ {
		if swag.IsZero(m.Reviews[i]) { // not required
			continue
		}

		if m.Reviews[i] != nil {
			if err := m.Reviews[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("reviews" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Movie) validateTomato(formats strfmt.Registry) error {

	if swag.IsZero(m.Tomato) { // not required
		return nil
	}

	if m.Tomato != nil {
		if err := m.Tomato.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tomato")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Movie) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Movie) UnmarshalBinary(b []byte) error {
	var res Movie
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MovieAwards movie awards
//
// swagger:model MovieAwards
type MovieAwards struct {

	// nominations
	Nominations int64 `json:"nominations,omitempty"`

	// text
	Text string `json:"text,omitempty"`

	// wins
	Wins int64 `json:"wins,omitempty"`
}

// Validate validates this movie awards
func (m *MovieAwards) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MovieAwards) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MovieAwards) UnmarshalBinary(b []byte) error {
	var res MovieAwards
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MovieImdb movie imdb
//
// swagger:model MovieImdb
type MovieImdb struct {

	// id
	ID string `json:"id,omitempty"`

	// rating
	Rating float64 `json:"rating,omitempty"`

	// votes
	Votes int64 `json:"votes,omitempty"`
}

// Validate validates this movie imdb
func (m *MovieImdb) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MovieImdb) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MovieImdb) UnmarshalBinary(b []byte) error {
	var res MovieImdb
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MovieReviewsItems0 movie reviews items0
//
// swagger:model MovieReviewsItems0
type MovieReviewsItems0 struct {

	// comment
	Comment string `json:"comment,omitempty"`

	// date
	// Format: date-time
	Date strfmt.DateTime `json:"date,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rating
	Rating float64 `json:"rating,omitempty"`
}

// Validate validates this movie reviews items0
func (m *MovieReviewsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MovieReviewsItems0) validateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MovieReviewsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MovieReviewsItems0) UnmarshalBinary(b []byte) error {
	var res MovieReviewsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MovieTomato movie tomato
//
// swagger:model MovieTomato
type MovieTomato struct {

	// consensus
	Consensus string `json:"consensus,omitempty"`

	// fresh
	Fresh int64 `json:"fresh,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// meter
	Meter int64 `json:"meter,omitempty"`

	// rating
	Rating float64 `json:"rating,omitempty"`

	// reviews
	Reviews int64 `json:"reviews,omitempty"`

	// user meter
	UserMeter int64 `json:"userMeter,omitempty"`

	// user rating
	UserRating float64 `json:"userRating,omitempty"`

	// user reviews
	UserReviews int64 `json:"userReviews,omitempty"`
}

// Validate validates this movie tomato
func (m *MovieTomato) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MovieTomato) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MovieTomato) UnmarshalBinary(b []byte) error {
	var res MovieTomato
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
